# VARIABLES:
# - Package.Version: Semantic version for MSIX package
# - Package.Artifact: Name of build artifact to use for the package
#
# See: https://learn.microsoft.com/en-us/windows/apps/windows-app-sdk/single-project-msix?tabs=csharp
# See: https://github.com/andrewleader/WindowsAppSDKGallery/blob/main/.github/workflows/dotnet-desktop.yml#L102

parameters:
- name: platform
  type: string 
  default: 'x64'

# Can't do this, sadly :(  
# variables:
#  Package.File: $(Solution.PackageProject)-$(Package.Version)-${{ parameters.platform }}.msix

steps:
- task: MSBuild@1
  displayName: 'Restore'
  inputs:
    solution: $(Solution.File)
    platform: ${{ parameters.platform }}
    configuration: "Release"
    msbuildArguments: '/t:Restore'

- powershell: |
     # Update appxmanifest. This must be done before the build.
     [xml]$manifest= get-content "$(Solution.PackageDirectory)\Package.appxmanifest"
     $manifest.Package.Identity.Version = "$(Package.Version)"    
     $manifest.save("$(Solution.PackageDirectory)/Package.appxmanifest")
  displayName: 'Version Package Manifest'

# Note that signing is specified in the .CSPROJ file. The existence of these properties
# will cause the signing. `signing-cert.yaml` step will take care of getting the cert
# in the local store.
#	<AppxPackageSigningEnabled>True</AppxPackageSigningEnabled>
#	<PackageCertificateThumbprint>000redacted000</PackageCertificateThumbprint>

- task: MSBuild@1
  displayName: 'Build MSIX Package for ${{ parameters.platform }}'
  inputs:
    solution: $(Solution.File)
    platform: ${{ parameters.platform }}
    configuration: "Release"
    msbuildArguments: '/p:OutputPath=NonPackagedApp 
      /p:GenerateAppxPackageOnBuild=true 
      /p:UapAppxPackageBuildMode=SideLoadOnly 
      /p:AppxPackageOutput=$(Build.ArtifactStagingDirectory)\$(Solution.PackageProject)-$(Solution.Version)-${{ parameters.platform }}.msix'
