# VARIABLES:
# - Package.Version: Semantic version for MSIC package
# - Package.Artifact: Name of build artifact to use for the package
#
# See: https://learn.microsoft.com/en-us/windows/apps/windows-app-sdk/single-project-msix?tabs=csharp
# See: https://github.com/andrewleader/WindowsAppSDKGallery/blob/main/.github/workflows/dotnet-desktop.yml#L102

parameters:
- name: platform
  type: string 
  default: 'x64'

steps:
- task: MSBuild@1
  displayName: 'Restore'
  inputs:
    solution: $(Solution.PackageDirectory)/$(Solution.PackageProject).csproj
    configuration: "Release"
    msbuildArguments: '/t:Restore'

- powershell: |
     # Update appxmanifest. This must be done before the build.
     [xml]$manifest= get-content "$(Solution.PackageDirectory)\Package.appxmanifest"
     $manifest.Package.Identity.Version = "$(Package.Version)"    
     $manifest.save("$(Solution.PackageDirectory)/Package.appxmanifest")
  displayName: 'Version Package Manifest'
   
- task: MSBuild@1
  displayName: 'Build MSIX Package'
  inputs:
    solution: $(Solution.PackageDirectory)/$(Solution.PackageProject).csproj
    platform: ${{ parameters.platform }}
    configuration: "Release"
    msbuildArguments: '/p:OutputPath=NonPackagedApp 
      /p:GenerateAppxPackageOnBuild=true 
      /p:UapAppxPackageBuildMode=SideLoadOnly 
      /p:AppxBundle=Never 
      /p:AppxPackageOutput=$(Build.ArtifactStagingDirectory)\$(Solution.PackageProject)-$(Package.Version).msix 
      /p:AppxPackageSigningEnabled=false'
  
#
# UNSIGNED for starters
#
#- task: DownloadSecureFile@1
#  inputs:
#    secureFile: 'certificate.pfx'
#  displayName: 'Download Secure PFX File'
#  
#- script: '"C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x86\signtool"
#    sign /fd SHA256 /f $(Agent.TempDirectory)/certificate.pfx /p secret $(
#    Build.ArtifactStagingDirectory)/MsixDesktopApp.msix'
#  displayName: 'Sign MSIX Package'
  
- publish: $(Build.ArtifactStagingDirectory)\$(Solution.PackageProject)-$(Package.Version).msix
  displayName: 'Publish Artifact: $(Solution.PackageProject)'
  artifact: $(Solution.PackageProject)
